<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xsk‘s Notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-11T15:21:27.681Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>shukun.xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的排序算法（javascript）</title>
    <link href="http://yoursite.com/2017/07/10/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88javascript%EF%BC%89/"/>
    <id>http://yoursite.com/2017/07/10/常见的排序算法（javascript）/</id>
    <published>2017-07-10T12:31:11.000Z</published>
    <updated>2017-07-11T15:21:27.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>原理：假设排序顺序为增序，数组长度为 N。数组每相邻两个元素进行比较，大数后移，小数前移，第一轮排序下来就能找到最大的数。也就是比较 A[i] 和 A[i+1] ，将大数后移，随后增加 i 的值，再进行比较。第二轮再对剩余的 N-1 个数进行排序，找出第二大的数，以此类推。同时也可以记录交换次数来进行优化，如果在一层循环之中交换次数为 0，则排序结束。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(n^2)</td>
<td>O(n)</td>
<td>O(n^2)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> swapTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length1 = arr.length; i &lt; length1; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, length2 = length1 - i; j &lt; length2 - <span class="number">1</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                swapTime++;</div><div class="line">                <span class="keyword">var</span> temp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//检查交换次数，如果为0，则当前数组为有序数组；如不为0，则重置 </span></div><div class="line">            <span class="keyword">if</span> (swapTime === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                swapTime = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>原理：假设排序方式为增序，数组长度为 N。设置最大值索引初始值 index = 0，然后遍历数组，记录下最大值的索引，即比较 A[i] 与 A[index] 的值，若 A[i] &gt; A[index] 则更新 index = i。在每一轮遍历结束后，交换 index 位置和末尾位置的值，即交换 A[index] 和 A[i]，这样便保证了末尾值是最大值。随后对剩余的 N-1 个数进行同样的方式排序，以此类推。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length1 = arr.length; i &lt; length1; i++) &#123;</div><div class="line">        <span class="keyword">var</span> index = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, length2 = length1 - i; j &lt; length2; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[index]) &#123;</div><div class="line">                index = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> temp = arr[index];</div><div class="line">        arr[index] = arr[length1 - i - <span class="number">1</span>];</div><div class="line">        arr[length1 - i - <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>原理：假设排序方式为增序，数组长度为 N。初始设 A[0] 为有序数组，A[1] ~ A[N-1] 为无序数组，取出 A[1] 将其插入至有序数组中的正确位置，使得有序数组增大为 A[0] ~ A[1]。继续取 A[2] 将其插入至有序表数组的正确位置，以此类推，直至无序数组取完。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length1 = arr.length; i &lt; length1; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, length2 = i + <span class="number">1</span>; j &lt; length2; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[length2]) &#123;</div><div class="line">                <span class="keyword">var</span> temp = arr[length2];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k = length2; k &gt; j; k--) &#123;</div><div class="line">                    arr[k] = arr[k - <span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>原理：假设排序方式为增序，数组长度为 N。首先取步长 gap = N/2，那么便将 N 长度的数组拆分成了 [A[0], A[gap]]，[A[1], A[gap+1]]，[A[2], A[gap+3]] … … [A[gap-1], A[N-1]] 子数组，分别对子数组进行插入排序。随后逐步缩小步长，再进行插入排序，直至步长为 1。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(nLogn)~O(n^2)</td>
<td>O(n^1.3)</td>
<td>O(n^2)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>js实现:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> gap = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">    <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; gap; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt; arr.length; j += gap) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k = i, length = j + gap; k &lt; length; k += gap) &#123;</div><div class="line">                    <span class="keyword">if</span> (arr[k] &gt; arr[length]) &#123;</div><div class="line">                        <span class="keyword">var</span> temp = arr[length];</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> x = length; x &gt; k; x = x - gap) &#123;</div><div class="line">                            arr[x] = arr[x - gap];</div><div class="line">                        &#125;</div><div class="line">                        arr[k] = temp;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>原理：假设排序顺序为增序，数组长度为 N。将数组拆分成 N 个长度为 1 的数组。然后相邻子数组进行归并，形成若干个长度为 2 或者 1 的数组，再继续进行归并，直至长度为 N。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(nLogn)</td>
<td>O(nLogn)</td>
<td>O(nLogn)</td>
<td>O(n)</td>
</tr>
</tbody>
</table>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (n &lt; arr.length) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i += n * <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">var</span> arr1 = arr.slice(i, i + n);</div><div class="line">            <span class="keyword">var</span> arr2 = arr.slice(i + n, i + (n * <span class="number">2</span>));</div><div class="line">            <span class="keyword">var</span> temp = [];</div><div class="line">            <span class="keyword">while</span> (arr1.length != <span class="number">0</span> || arr2.length != <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (arr1.length === <span class="number">0</span>) &#123;</div><div class="line">                     temp.push(arr2.shift);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (arr2.length === <span class="number">0</span>) &#123;</div><div class="line">                    temp.push(arr1.shift);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (arr1[<span class="number">0</span>] &lt; arr2[<span class="number">0</span>]) &#123;</div><div class="line">                    temp.push(arr1.shift);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                     temp.push(arr2.shift);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">           arr.splice(i, n * <span class="number">2</span>, ...temp);</div><div class="line">        &#125;</div><div class="line">        n = n * <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>原理：在每一轮排序中取一个基数 k ， 设 i 和 j 分别为数组的最左端和最右端，i 坐标从起始点向 k 点遍历，若找到一个比 k 大的元素，则停下来等待 j 的遍历。 j 坐标从起始点向 k 点遍历，若找到一个比 k 小的元素，则 i 和 j 坐标的元素互相交换。若有一端提前到达了 k 点，则等待满足条件后与另一端坐标交换。当 i 和 j 碰撞时，则为分治点，此时 i 和 j 相碰撞的坐标元素便是它的最终位置，以碰撞点为中心将数组拆分成两段，并进行相同的递归处理。当 i &gt;= j 时，则为回退点。</p>
<table>
<thead>
<tr>
<th>平均时间复杂度</th>
<th>最优时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>O(nLogn)</td>
<td>O(nLogn)</td>
<td>O(n^2)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>js实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array, first, last</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (first &gt;= last) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> base = <span class="built_in">Math</span>.floor((first + last) / <span class="number">2</span>);</div><div class="line">        <span class="keyword">var</span> i = first - <span class="number">1</span>;</div><div class="line">        <span class="keyword">var</span> j = last - <span class="number">1</span>;</div><div class="line">        <span class="keyword">var</span> temp;</div><div class="line">        <span class="keyword">while</span> (j &gt; i) &#123;</div><div class="line">            <span class="keyword">while</span> (j &gt; i &amp;&amp; array[j] &gt; array[base]) &#123;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt;= array[base]) &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            temp = array[i];</div><div class="line">            array[i] = array[j];</div><div class="line">            array[j] = temp;</div><div class="line">        &#125;</div><div class="line">        temp = array[base];</div><div class="line">        array[base] = array[i];</div><div class="line">        array[i] = temp;</div><div class="line">        sort(array, first, i);</div><div class="line">        sort(array, i + <span class="number">2</span>, last)</div><div class="line">    &#125;</div><div class="line">    sort(arr, <span class="number">1</span>, arr.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;p&gt;原理：假设排序顺序为增序，数组长度为 N。数组每相邻两个元素进行比较，大数后移，小数前移，第一轮排序下来就能找到最大的数。也
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6 学习笔记</title>
    <link href="http://yoursite.com/2017/07/07/ES6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/07/ES6-学习笔记/</id>
    <published>2017-07-07T03:31:19.000Z</published>
    <updated>2017-07-09T06:22:58.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h1><h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</div><div class="line">    <span class="keyword">var</span> a=<span class="number">2</span></div><div class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">2</span>) <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>使用var两次输出都是2，而let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">2</span></div><div class="line">    <span class="built_in">console</span>.log(a)  <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>一道经典的题目：通过循环内部创建函数输出索引值。<br>在ES5中一般通过闭包来实现，而使用ES6直接通过let声明变量即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> func=[]</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">    func.push((<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(value)</div><div class="line">        &#125;</div><div class="line">    &#125;)(i))</div><div class="line">&#125;</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">    func.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="built_in">Math</span>.PI</div><div class="line">PI = <span class="number">1</span> <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></div></pre></td></tr></table></figure></p>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>在ES5写法中，如果一段字符串中包含变量值得话，一般通过+号来拼接字符串。而在ES6中通过模板字符串可以轻松实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> name =<span class="string">"world"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"hello "</span>+name)  <span class="comment">//hello world</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">const</span> name =<span class="string">"world"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) <span class="comment">//helle world</span></div></pre></td></tr></table></figure></p>
<h1 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h1><p>在ES6中给函数的参数提供默认值，直接通过(=)赋值即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">num =<span class="number">100</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(num)</div><div class="line">&#125;</div><div class="line"></div><div class="line">action() <span class="comment">//100</span></div><div class="line">action(<span class="number">200</span>) <span class="comment">//200</span></div></pre></td></tr></table></figure></p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数主要变现为以下特点：</p>
<ol>
<li>定义函数不再需要function关键词</li>
<li>继承当前上下文的this</li>
<li>省略return关键词</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个参数，一个表达式返回值</span></div><div class="line"><span class="keyword">var</span> people = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">'hello '</span>+name;</div><div class="line"></div><div class="line"><span class="comment">//多个参数，多行方法体</span></div><div class="line"><span class="keyword">var</span> people = <span class="function">(<span class="params">name,age</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> all = name+age;</div><div class="line">    <span class="keyword">return</span> all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>所谓 Promise，就是一个对象，用来传递异步操作的消息。<br>Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和 Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">        resolve(value);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(error);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line"> <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line"> <span class="comment">// failure</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 方法和 reject 方法。<br>如果异步操作成功，则用 resolve 方法将 Promise 对象的状态，从「未完成」变为「成功」（即从 pending 变为 resolved）；<br>如果异步操作失败，则用 reject 方法将 Promise 对象的状态，从「未完成」变为「失败」（即从 pending 变为 rejected）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;let和const命令&quot;&gt;&lt;a href=&quot;#let和const命令&quot; class=&quot;headerlink&quot; title=&quot;let和const命令&quot;&gt;&lt;/a&gt;let和const命令&lt;/h1&gt;&lt;h2 id=&quot;let命令&quot;&gt;&lt;a href=&quot;#let命令&quot; class
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>First</title>
    <link href="http://yoursite.com/2017/07/05/First/"/>
    <id>http://yoursite.com/2017/07/05/First/</id>
    <published>2017-07-05T08:24:22.000Z</published>
    <updated>2017-07-05T13:03:38.633Z</updated>
    
    <content type="html"><![CDATA[<p>您好，欢迎来到我的技术博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您好，欢迎来到我的技术博客。&lt;/p&gt;

    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
